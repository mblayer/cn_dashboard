---
// src/components/PlayersTable.astro
import type { PlayerStats } from "../types";

const { players = [] }: { players?: PlayerStats[] } = Astro.props;

// Ordenamiento por columna
const sortOptions = [
  { key: "rank", label: "Rank" },
  { key: "rating", label: "Rating" },
  { key: "displayName", label: "Name" },
  { key: "games", label: "Games" },
  { key: "wins", label: "Wins" },
  { key: "losses", label: "Losses" },
  { key: "winrate", label: "Winrate" },
];

let sortBy = Astro.url?.searchParams.get("sort") ?? "rank";
let sortDir = Astro.url?.searchParams.get("dir") ?? "asc";

function getSortedPlayers(players) {
  return [...players].sort((a, b) => {
    let cmp = 0;
    if (sortBy === "displayName") {
      cmp = (a.displayName ?? "").localeCompare(b.displayName ?? "");
    } else if (sortBy === "winrate") {
      cmp = (b.winrate ?? 0) - (a.winrate ?? 0);
    } else {
      cmp = (b[sortBy] ?? 0) - (a[sortBy] ?? 0);
    }
    return sortDir === "asc" ? -cmp : cmp;
  });
}

const sortedPlayers = getSortedPlayers(players);

function getSortUrl(key) {
  let dir = sortBy === key && sortDir === "desc" ? "asc" : "desc";
  return `?sort=${key}&dir=${dir}`;
}
---

<section class="max-w-6xl mx-auto px-4 lg:px-0 py-8 p-6 space-y-8">
  <!-- Vista de tabla para escritorio -->
  <div class="hidden md:block overflow-x-auto">
    <table
      class="min-w-full table-auto border-separate border-spacing-0 bg-white dark:bg-neutral-800 rounded-xl shadow-lg border border-neutral-200 dark:border-neutral-700"
    >
      <thead>
        <tr>
          <th class="px-4 py-3 text-left text-sm font-medium">
            <a href={getSortUrl("rank")} class="hover:underline cursor-pointer">
              Rank{sortBy === "rank" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-left text-sm font-medium">
            <a href={getSortUrl("rating")} class="hover:underline cursor-pointer">
              Rating{sortBy === "rating" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-left text-sm font-medium">
            <a href={getSortUrl("displayName")} class="hover:underline cursor-pointer">
              Name{sortBy === "displayName" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-center text-sm font-medium">
            <a href={getSortUrl("games")} class="hover:underline cursor-pointer">
              Games{sortBy === "games" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-center text-sm font-medium">
            <a href={getSortUrl("wins")} class="hover:underline cursor-pointer">
              Wins{sortBy === "wins" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-center text-sm font-medium">
            <a href={getSortUrl("losses")} class="hover:underline cursor-pointer">
              Losses{sortBy === "losses" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-center text-sm font-medium">
            <a href={getSortUrl("winrate")} class="hover:underline cursor-pointer">
              Winrate{sortBy === "winrate" ? (sortDir === "asc" ? " â–²" : " â–¼") : ""}
            </a>
          </th>
          <th class="px-4 py-3 text-left text-sm font-medium">Performance</th>
          <th class="px-4 py-3 text-left text-sm font-medium">Last Game</th>
        </tr>
      </thead>
      <tbody class="divide-y">
        {
          sortedPlayers.map((player) => (
            <tr class="group hover:bg-gray-800 transition-colors">
              {/* Rank */}
              <td class="px-4 py-3 whitespace-nowrap text-sm font-semibold">
                {player.rank}
              </td>
              {/* Rating */}
              <td class="px-4 py-3 whitespace-nowrap text-sm">
                {player.rating}
              </td>
              {/* Name */}
              <td class="px-4 py-3 flex flex-col whitespace-nowrap">
                <a
                  href={`/players/${player.id}`}
                  class="text-blue-600 hover:underline dark:text-blue-400"
                >
                  {player.displayName}
                </a>
                <span class="text-xs">{player.playerName}</span>
              </td>
              {/* Games */}
              <td class="px-4 py-3 whitespace-nowrap text-center text-gray-200 text-sm">
                {player.games}
              </td>
              {/* Wins */}
              <td class="px-4 py-3 whitespace-nowrap text-center text-green-400 text-sm font-semibold">
                {player.wins}
              </td>
              {/* Losses */}
              <td class="px-4 py-3 whitespace-nowrap text-center text-red-500 text-sm font-semibold">
                {player.losses}
              </td>
              {/* Winrate */}
              <td class="px-4 py-3 whitespace-nowrap text-center text-gray-200 text-sm">
                {(player.winrate * 100).toFixed(2)}%
              </td>
              {/* Performance */}
              <td class="px-4 py-3 whitespace-nowrap text-sm">
                <div class="flex items-center space-x-2">
                  <div class="flex space-x-1">
                    {player.lastResults.slice().reverse().map((wasWin, idx) => (
                      <span
                        key={idx}
                        class={`w-2 h-2 rounded-full ${
                          wasWin === true
                            ? "bg-green-400"
                            : wasWin === false
                            ? "bg-red-500"
                            : "bg-blue-400"
                        }`}
                      />
                    ))}
                  </div>
                  <span class="ml-2 text-sm font-medium text-gray-100">
                    {player.performance}
                  </span>
                  {player.performance > 0 && (
                    <span class="ml-1 text-red-500 text-base animate-pulse">
                      ðŸ”¥
                    </span>
                  )}
                </div>
              </td>
              {/* Last Game */}
              <td class="px-4 py-3 whitespace-nowrap text-sm">
                {player.lastGame}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <!-- Vista tipo cards para mobile -->
  <div class="flex flex-col gap-6 md:hidden">
    {sortedPlayers.map((player) => (
      <div class="bg-white dark:bg-neutral-800 rounded-xl shadow-lg border border-neutral-200 dark:border-neutral-700 p-4 flex flex-col gap-2">
        <div class="flex items-center justify-between">
          <span class="text-xs font-semibold text-neutral-500 dark:text-neutral-400">Rank #{player.rank}</span>
          <span class="text-sm font-semibold text-blue-700 dark:text-yellow-300">Rating: {player.rating}</span>
        </div>
        <div>
          <span class="block font-bold text-lg text-neutral-900 dark:text-neutral-100">{player.displayName}</span>
          <span class="block text-xs text-neutral-500 dark:text-neutral-400">{player.playerName}</span>
        </div>
        <div class="flex flex-wrap gap-2 mt-2">
          <span class="bg-neutral-100 dark:bg-neutral-700 rounded px-2 py-1 text-xs text-neutral-800 dark:text-neutral-200">
            Games: <span class="font-semibold">{player.games}</span>
          </span>
          <span class="bg-green-100 dark:bg-green-900 rounded px-2 py-1 text-xs text-green-700 dark:text-green-300">
            Wins: <span class="font-semibold">{player.wins}</span>
          </span>
          <span class="bg-red-100 dark:bg-red-900 rounded px-2 py-1 text-xs text-red-700 dark:text-red-300">
            Losses: <span class="font-semibold">{player.losses}</span>
          </span>
          <span class="bg-blue-100 dark:bg-blue-900 rounded px-2 py-1 text-xs text-blue-700 dark:text-blue-300">
            Winrate: <span class="font-semibold">{(player.winrate * 100).toFixed(2)}%</span>
          </span>
        </div>
        <div class="flex items-center gap-2 mt-2">
          <span class="text-xs text-neutral-500 dark:text-neutral-400">Performance:</span>
          <div class="flex space-x-1">
            {player.lastResults.slice().reverse().map((wasWin, idx) => (
              <span
                key={idx}
                class={`w-2 h-2 rounded-full ${
                  wasWin === true
                    ? "bg-green-400"
                    : wasWin === false
                    ? "bg-red-500"
                    : "bg-blue-400"
                }`}
              />
            ))}
          </div>
          <span class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-100">
            {player.performance}
          </span>
          {player.performance > 0 && (
            <span class="ml-1 text-red-500 text-base animate-pulse">
              ðŸ”¥
            </span>
          )}
        </div>
        <div class="mt-2 text-xs text-neutral-500 dark:text-neutral-400">
          Last Game: <span class="font-semibold text-neutral-900 dark:text-neutral-100">{player.lastGame}</span>
        </div>
      </div>
    ))}
  </div>
</section>
